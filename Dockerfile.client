# ---- Build stage ----
FROM node:18-alpine AS build

# Create app directory
WORKDIR /app

# Install deps first (cacheable). Copy package files only so Docker can cache node_modules when
# package.json / lockfile haven't changed.
COPY package*.json ./
COPY package-lock.json* ./
COPY bun.lockb ./

# Use npm ci when lockfile is present for reproducible installs, fall back to npm install.
# For building with Vite we must install devDependencies too, so do not omit dev deps here.
RUN if [ -f package-lock.json ]; then npm ci; else npm install; fi

# Copy the rest of the sources
COPY . .

# Build the application (Vite outputs to /dist by default)
RUN npm run build


# ---- Production stage ----
FROM nginx:stable-alpine AS production

# Copy static build artifacts from the build stage
COPY --from=build /app/dist /usr/share/nginx/html

# Copy nginx configuration for API proxying
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80 and run nginx in the foreground
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]